{"version":3,"sources":["actions/types.ts","actions/info.ts","components/Station.tsx","components/App.tsx","actions/status.ts","reducers/index.ts","reducers/info.ts","reducers/status.ts","index.tsx"],"names":["ActionTypes","Station","this","props","station","num_bikes_available","num_docks_available","rentalMethods","rental_methods","className","capacity","name","address","renderBikeClass","renderDockClass","join","Component","_App","state","nameSort","capacitySort","sortByName","sortByCapacity","fetching","onSortByNameClick","setState","fetchStationInformation","onSortByCapacityClick","fetchStationStatus","stationInformation","length","sort","a","b","fa","firstFiftyStations","slice","i","stationStatus","forEach","station_id","temp","map","toLowerCase","fb","onClick","renderSortedByName","renderSortedByCapacity","App","connect","dispatch","axios","get","then","res","data","stations","response","type","payload","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.659ff462.chunk.js","sourcesContent":["import { FetchStationInformationAction } from './info';\nimport {\n  FetchStationStatusAction,\n  // DisplayStatusAction\n} from './status';\n\nexport enum ActionTypes {\n  fetchStationInformation,\n  fetchStationStatus,\n  // displayStatus,\n}\n\nexport type Action = FetchStationInformationAction | FetchStationStatusAction;\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionTypes } from './types';\n\nexport interface StationInformation {\n  station_id: number;\n  name: string;\n  address: string;\n  capacity: number;\n  rental_methods: string[];\n}\n\nexport interface StationsInfoList {\n  stations: StationInformation[];\n}\n\nexport interface StationsInfoRes {\n  data: StationsInfoList;\n}\n\nexport interface FetchStationInformationAction {\n  type: ActionTypes.fetchStationInformation;\n  // payload: StationsInfoList;\n  payload: StationInformation[];\n}\n\nexport const fetchStationInformation = () => {\n  const stationInfoUrl =\n    'https://tor.publicbikesystem.net/ube/gbfs/v1/en/station_information';\n  return async (dispatch: Dispatch) => {\n    const response = await axios\n      .get<StationsInfoRes>(stationInfoUrl)\n      .then(res => {\n        return res.data.data.stations;\n      });\n\n    dispatch<FetchStationInformationAction>({\n      type: ActionTypes.fetchStationInformation,\n      payload: response,\n    });\n  };\n};\n","import React, { Component } from 'react';\nimport './App.css';\n\ninterface StationProps {\n  station_id: number;\n  name: string;\n  address: string;\n  cross_street?: string;\n  capacity: number;\n  num_bikes_available?: number;\n  num_docks_available?: number;\n  rental_methods: string[];\n  status?: string;\n}\n\ninterface CurrentState {\n  station: StationProps;\n}\n\nexport default class Station extends Component<CurrentState> {\n  renderBikeClass(): string {\n    if (this.props.station.num_bikes_available === 0) {\n      return 'red';\n    } else if (this.props.station.num_bikes_available === 1) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n  renderDockClass(): string {\n    if (this.props.station.num_docks_available === 0) {\n      return 'red';\n    } else if (this.props.station.num_docks_available === 1) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  }\n\n  render() {\n    let { station } = this.props;\n    let rentalMethods = station.rental_methods;\n\n    return (\n      <ul className='station__list__item'>\n        <li>Capacity: {station.capacity}</li>\n        <li className='station__header'>\n          <h2 className='station__info'>\n            <span className='station__label'>Station</span>\n            <span className='station__name'>{station.name}</span>\n            <span className='station__label'>Address</span>\n            <span className='station__address'>{station.address}</span>\n          </h2>\n        </li>\n\n        <li className='availability'>\n          <h3>\n            <span className={this.renderBikeClass()}>\n              {station.num_bikes_available}\n            </span>{' '}\n            {station.num_bikes_available === 1 ? 'Bike' : 'Bikes'}\n          </h3>\n          <h3>\n            <span className={this.renderDockClass()}>\n              {station.num_docks_available}\n            </span>{' '}\n            {station.num_docks_available === 1 ? 'Dock' : 'Docks'}\n          </h3>\n        </li>\n        <li className='rental__methods'>\n          <p className='payment__options'>{rentalMethods.join(' / ')}</p>\n        </li>\n      </ul>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport {\n  StationInformation,\n  fetchStationInformation,\n  StationStatus,\n  fetchStationStatus,\n} from '../actions';\nimport Station from './Station';\nimport { StoreState } from '../reducers';\n\ninterface AppProps {\n  stationInformation: StationInformation[];\n  stationStatus: StationStatus[];\n  fetchStationInformation: Function;\n  fetchStationStatus: Function;\n}\n\nexport interface CombinedStation {\n  station_id: number;\n  name: string;\n  address: string;\n  capacity: number;\n  num_bikes_available?: number;\n  num_docks_available?: number;\n  rental_methods: string[];\n  status?: string;\n}\n\nclass _App extends Component<AppProps> {\n  state = {\n    nameSort: [],\n    capacitySort: [],\n    sortByName: true,\n    sortByCapacity: false,\n    fetching: false,\n  };\n\n  componentDidMount() {\n    this.props.fetchStationInformation();\n    this.props.fetchStationStatus();\n    this.props.stationInformation.length === 0 &&\n      this.setState({ fetching: true });\n  }\n\n  componentDidUpdate(): void {\n    this.props.stationInformation.length !== 0 &&\n      this.state.fetching === true &&\n      this.setState({ fetching: false });\n  }\n\n  onSortByNameClick = (): void => {\n    this.setState({\n      sortByName: true,\n      sortByCapacity: false,\n    });\n    this.props.fetchStationInformation();\n  };\n\n  onSortByCapacityClick = (): void => {\n    this.setState({\n      sortByCapacity: true,\n      sortByName: false,\n    });\n  };\n\n  renderSortedByCapacity(): JSX.Element[] {\n    this.props.stationInformation.sort((a, b) => {\n      let fa = a.capacity;\n      let fb = b.capacity;\n      return fb - fa;\n    });\n\n    let firstFiftyStations: CombinedStation[] = this.props.stationInformation.slice(\n      0,\n      50\n    );\n\n    for (let i = 0; i < firstFiftyStations.length; i++) {\n      this.props.stationStatus.forEach(station => {\n        if (station.station_id === firstFiftyStations[i].station_id) {\n          let temp = { ...firstFiftyStations[i], ...station };\n          firstFiftyStations[i] = temp;\n        }\n      });\n    }\n\n    return firstFiftyStations.map(station => {\n      return <Station key={station.station_id} station={station} />;\n    });\n  }\n\n  renderSortedByName(): JSX.Element[] {\n    this.props.stationInformation.sort((a, b) => {\n      let fa = a.name.toLowerCase();\n      let fb = b.name.toLowerCase();\n      if (fa < fb) {\n        return -1;\n      }\n      if (fa > fb) {\n        return 1;\n      }\n      return 0;\n    });\n\n    let firstFiftyStations: CombinedStation[] = this.props.stationInformation.slice(\n      0,\n      50\n    );\n\n    for (let i = 0; i < firstFiftyStations.length; i++) {\n      this.props.stationStatus.forEach(station => {\n        if (station.station_id === firstFiftyStations[i].station_id) {\n          let temp = { ...firstFiftyStations[i], ...station };\n          firstFiftyStations[i] = temp;\n        }\n      });\n    }\n\n    return firstFiftyStations.map(station => {\n      return <Station key={station.station_id} station={station} />;\n    });\n  }\n\n  render() {\n    return (\n      <div className='App__main'>\n        <div className='sort__options'>\n          <button className='sort__button' onClick={this.onSortByNameClick}>\n            Sort by Name\n          </button>\n          <button className='sort__button' onClick={this.onSortByCapacityClick}>\n            Sort by Capacity\n          </button>\n        </div>\n        <div className='main__container'>\n          {this.state.fetching && <p>loading....</p>}\n          {this.state.sortByName && this.renderSortedByName()}\n          {this.state.sortByCapacity && this.renderSortedByCapacity()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (\n  state: StoreState\n): {\n  stationInformation: StationInformation[];\n  stationStatus: StationStatus[];\n} => {\n  return {\n    stationInformation: state.stationInformation,\n    stationStatus: state.stationStatus,\n  };\n};\n\n//export the connected version of app\nexport const App = connect(mapStateToProps, {\n  fetchStationInformation,\n  fetchStationStatus,\n})(_App);\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionTypes } from './types';\n\nexport interface StationStatus {\n  station_id: number;\n  num_bikes_available: number;\n  status: string;\n  num_docks_disabled: number;\n}\n\nexport interface StationsStatusList {\n  stations: StationStatus[];\n}\n\nexport interface StationStatusRes {\n  data: StationsStatusList;\n}\n\nexport interface FetchStationStatusAction {\n  type: ActionTypes.fetchStationStatus;\n  payload: StationStatus[];\n  // payload: StationsStatusList;\n}\n\n// export interface DisplayStatusAction {\n//   type: ActionTypes.displayStatus;\n//   payload: number;\n// }\n\nexport const fetchStationStatus = () => {\n  const stationStatusUrl =\n    'https://tor.publicbikesystem.net/ube/gbfs/v1/en/station_status';\n  return async (dispatch: Dispatch) => {\n    const response = await axios\n      .get<StationStatusRes>(stationStatusUrl)\n      .then(res => res.data.data.stations);\n    // .catch(error => 'error');\n\n    dispatch<FetchStationStatusAction>({\n      type: ActionTypes.fetchStationStatus,\n      payload: response,\n    });\n  };\n};\n\n// export const displayStatus = (id: number): DisplayStatusAction => {\n//   return {\n//     type: ActionTypes.displayStatus,\n//     payload: id,\n//   };\n// };\n","import { combineReducers } from 'redux';\nimport { stationInfoReducer } from './info';\nimport { stationStatusReducer } from './status';\nimport { StationInformation, StationStatus } from '../actions';\n\nexport interface StoreState {\n  stationInformation: StationInformation[];\n  stationStatus: StationStatus[];\n}\n\nexport const reducers = combineReducers({\n  stationInformation: stationInfoReducer,\n  stationStatus: stationStatusReducer,\n});\n","import {\n  StationInformation,\n  FetchStationInformationAction,\n  ActionTypes,\n} from '../actions';\n\nexport const stationInfoReducer = (\n  state: StationInformation[] = [],\n  action: FetchStationInformationAction\n) => {\n  switch (action.type) {\n    case ActionTypes.fetchStationInformation:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import {\n  StationStatus,\n  // FetchStationStatusAction,\n  ActionTypes,\n  // DisplayStatusAction,\n  Action,\n} from '../actions';\n\nexport const stationStatusReducer = (\n  state: StationStatus[] = [],\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionTypes.fetchStationStatus:\n      return action.payload;\n    // case ActionTypes.displayStatus:\n    //   return state.find(station => station.station_id === action.payload);\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { App } from './components/App';\nimport { reducers } from './reducers';\nimport './index.css';\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}